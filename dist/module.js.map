{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./module.ts","webpack:///./datasource.ts","webpack:///./query_ctrl.ts","webpack:///external \"app/plugins/sdk\"","webpack:///./config_ctrl.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_query_ctrl","_config_ctrl","Datasource","_datasource","DarkSkyDatasource","QueryCtrl","DarkSkyQueryCtrl","ConfigCtrl","DarkSkyConfigCtrl","instanceSettings","backendSrv","templateSrv","$q","this","datasourceName","config","jsonData","credentials","apikey","lat","lon","apiUrl","id","apiOptions","unit","language","$inject","metricFindQuery","query","_this","metrics","doRequest","data","then","res","_lodash2","default","transform","dataset","props","isArray","length","push","apply","filter","keys","map","uniq","sortBy","metric","text","options","buildQueryParameters","targets","hide","when","getAdhocFilters","adhocFilters","apiCalls","getApiCalls","range","maxDataPoints","requests","timestamps","ts","url","console","warn","Promise","all","response","timeMS","time","from","to","type","tableResponse","timeseriesResponse","step","hours","diff","date","clone","startOf","unix","days","Math","max","floor","add","isBefore","target","columns","head","val","match","rows","row","col","undefined","datapoints","replace","scopedVars","refId","testDatasource","status","message","title","datasourceRequest","assign","method","calls","headers","annotationQuery","_super","$scope","$injector","types","panelCtrl","panel","__extends","getOptions","datasource","refresh","templateUrl","log","units","languages","current"],"mappings":"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","file":"module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import { DarkSkyDatasource } from './datasource';\nimport { DarkSkyQueryCtrl } from './query_ctrl';\nimport { DarkSkyConfigCtrl } from './config_ctrl';\n\nexport {\n  DarkSkyDatasource as Datasource,\n  DarkSkyQueryCtrl as QueryCtrl,\n  DarkSkyConfigCtrl as ConfigCtrl,\n};\n","import _ from \"lodash\";\n\ntype ApiCallDefinition = {\n  dataset: string,\n  timestamps: Array<number>\n}\n\ntype Metric = {\n  text: string,\n  value: string\n}\n\nexport class DarkSkyDatasource {\n\n  datasourceName: string;\n  apiUrl: string;\n  apiOptions: string;\n  metrics: Metric[];\n\n  /** @ngInject **/\n  constructor(instanceSettings, private backendSrv, private templateSrv, private $q) {\n    this.datasourceName = instanceSettings.name;\n\n    let config = instanceSettings.jsonData;\n    let credentials = `${config.apikey}/${config.lat},${config.lon}`;\n    this.apiUrl = `/api/datasources/proxy/${instanceSettings.id}/darksky/${credentials}`;\n    this.apiOptions = `units=${config.unit}&lang=${config.language}`;\n  }\n\n  metricFindQuery(query) {\n    // cache metrics query\n    if (this.metrics) {\n      return this.metrics;\n    }\n\n    return this.doRequest({\n      data: query\n    }).then(res => {\n      // get all properties from forecast query\n      const datasets = ['currently', /*'minutely',*/ 'hourly', 'daily'];\n      let metrics = _.transform(datasets, (metrics, dataset) => {\n        let props = res.data[dataset];\n        if (props && _.isArray(props.data)) {\n          props = props.data.length ? props.data[0] : {};\n        }\n        metrics.push(... _.filter(_.keys(props), key => key != 'time'));\n      }, [] as string[]);\n\n      this.metrics = _.map(_.uniq(_.sortBy(metrics)), metric => ({\n        text: metric, \n        value: metric,\n      }));\n\n      return this.metrics;\n    });\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.$q.when({ data: [] });\n    }\n\n    if (this.templateSrv.getAdhocFilters) {\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.datasourceName);\n    } else {\n      query.adhocFilters = [];\n    }\n\n    let apiCalls = this.getApiCalls(query.range, query.maxDataPoints);\n    let requests = _.map(apiCalls.timestamps, ts => this.doRequest({\n      url: `${this.apiUrl},${ts}?${this.apiOptions}`,\n      data: query\n    }));\n\n    if (apiCalls.timestamps.length >= 10) {\n      console.warn(`DarkSky will execute ${apiCalls.timestamps.length} api.`);\n    }\n\n    return Promise.all(requests).then(response => {\n      // extraxt data from json result structure\n      let data = _.transform(response, (data, res) => {\n        // select currently datapoint\n        let dataset = _.get(res, `data.${apiCalls.dataset}`);\n        if (apiCalls.dataset == 'currently') {\n          data.push(dataset);\n          return;\n        }\n\n        // select timestamps inside query range\n        data.push(... _.filter(dataset.data, res => {\n          let timeMS = res.time * 1000;\n          return timeMS >= query.range.from && timeMS <= query.range.to;\n        }));\n      }, [] as any[]);\n\n      // sort by timestamp\n      data = _.sortBy(data, 'time')\n\n      // table query?\n      return (_.filter(query.targets, { type: 'table' }).length)\n        ? this.tableResponse(query.targets, data)\n        : this.timeseriesResponse(query.targets, data);\n    });\n  }\n\n  getApiCalls(range, maxDataPoints): ApiCallDefinition {\n    let dataset = 'hourly', step = 1;\n    let hours = range.to.diff(range.from, 'hours');\n\n    let date = range.from.clone().startOf('day');\n    let timestamps: any[] = [date.unix()];\n\n    // not same day?\n    if (range.to.date() !== range.from.date()) {\n      if (hours > 7 * 24) { // daily queries - daily\n        dataset = 'daily';\n        if (maxDataPoints) { // limit number of queries\n          let days = range.to.diff(range.from, 'days');\n          step = Math.max(step, Math.floor(days / maxDataPoints));\n        }\n      };\n\n      // create one timestamp per additional day\n      date.add(step, 'day');\n      while (date.isBefore(range.to)) {\n        timestamps.push(date.unix());\n        date.add(step, 'day');\n      }\n    }\n\n    return {\n      dataset: dataset,\n      timestamps: timestamps,\n    }\n  }\n\n  tableResponse(targets, data) {\n    // use first metric for table query\n    let timeframe = targets[0].target;\n\n    let columns = _.map(_.head(data) as any, (val, key) => ({\n      text: key,\n      type: (key.match(/[Tt]ime/)) ? 'time' : (typeof (val) === 'string' ? 'string' : 'number')\n    }));\n\n    let rows = _.map(data, row => {\n      return _.map(columns as any[], col => {\n        if (row[col.text] === undefined) return null;\n\n        // time to millisec\n        return col.type == 'time' ? row[col.text] * 1000 : row[col.text];\n      })\n    });\n\n    return {\n      data: [{\n        type: \"table\",\n        columns: columns,\n        rows: rows,\n      }]\n    };\n  }\n\n  timeseriesResponse(targets, data) {\n    let res = {\n      data: _.map(targets, target => ({\n        target: target.target,\n        datapoints: _.map(data, d => [d[target.target], d.time * 1000]),\n      }))\n    }\n\n    return res;\n  }\n\n  buildQueryParameters(options) {\n    // remove placeholder targets\n    options.targets = _.filter(options.targets, target => target.target !== 'select metric');\n    // apply variables\n    options.targets = _.map(options.targets, target => ({\n      target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n      refId: target.refId,\n      hide: target.hide,\n      type: target.type\n    }));\n\n    return options;\n  }\n\n  testDatasource() {\n    return this.doRequest({}).then(response => (response.status == 200) \n      ? { status: 'success', message: 'Data source is working', title: 'Success' }\n      : { status: 'error', message: `Data source returned status ${response.status}`, title: 'Error' }\n    );\n  }\n\n  doRequest(options) {\n    // call with pre-defined default options\n    return this.backendSrv.datasourceRequest(_.assign({\n      url: this.apiUrl,\n      method: 'GET',\n    }, options)).then(response => {\n      let calls = _.get(response.headers(), 'x-forecast-api-calls');\n      if (calls > 400) {\n        console.warn(`DarkSky noticed you've already executed ${calls} api calls. Free limit is 1000.`);\n      }\n      return response;\n    });\n  }\n\n  annotationQuery(options) {\n    return [];\n  }\n}","import { QueryCtrl } from 'grafana/app/plugins/sdk';\n// import './css/query-editor.css!'\n\nexport class DarkSkyQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n  \n  private types: {text: string, value: string}[];\n\n  /** @ngInject **/\n  constructor($scope, $injector, private templateSrv)  {\n    super($scope, $injector);\n\n    this.types = [{ text: 'Time series', value: 'timeseries' }, { text: 'Table', value: 'table' }];\n\n    this.target.target = this.target.target || 'select metric';\n    this.target.type = this.target.type || ((this.panelCtrl.panel.type === 'table') ? 'table' : 'timeseries');\n  }\n\n  getOptions(query) {\n    return this.datasource.metricFindQuery(this.target.type);\n  }\n\n  refresh() {\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__4__;","export class DarkSkyConfigCtrl {\n  static templateUrl = 'partials/config.html';\n  \n  current: any;\n  private units: {name:string, value:string}[];\n  private languages: { name: string, value: string }[];\n\n  /** @ngInject **/\n  constructor($scope) {\n    console.log(\"DarkSkyConfigCtrl\");\n    console.log($scope);\n    console.log(this);\n\n    this.units = [\n      { name: 'SI', value: 'si' },\n      { name: 'Auto', value: 'auto' },\n      { name: 'US', value: 'us' },\n      { name: 'CA', value: 'ca' },\n      { name: 'UK', value: 'uk2' },\n    ];\n\n    this.languages = [\n      { name: 'Arabic', value: 'ar' },\n      { name: 'Azerbaijani', value: 'az' },\n      { name: 'Belarusian', value: 'be' },\n      { name: 'Bulgarian', value: 'bg' },\n      { name: 'Bosnian', value: 'bs' },\n      { name: 'Catalan', value: 'ca' },\n      { name: 'Czech', value: 'cs' },\n      { name: 'Danish', value: 'da' },\n      { name: 'German', value: 'de' },\n      { name: 'Greek', value: 'el' },\n      { name: 'English', value: 'en' },\n      { name: 'Spanish', value: 'es' },\n      { name: 'Estonian', value: 'et' },\n      { name: 'Finnish', value: 'fi' },\n      { name: 'French', value: 'fr' },\n      { name: 'Hebrew', value: 'he' },\n      { name: 'Croatian', value: 'hr' },\n      { name: 'Hungarian', value: 'hu' },\n      { name: 'Indonesian', value: 'id' },\n      { name: 'Icelandic', value: 'is' },\n      { name: 'Italian', value: 'it' },\n      { name: 'Japanese', value: 'ja' },\n      { name: 'Georgian', value: 'ka' },\n      { name: 'Korean', value: 'ko' },\n      { name: 'Cornish', value: 'kw' },\n      { name: 'Norwegian', value: 'nb' },\n      { name: 'Dutch', value: 'nl' },\n      { name: 'Polish', value: 'pl' },\n      { name: 'Portuguese', value: 'pt' },\n      { name: 'Romanian', value: 'ro' },\n      { name: 'Russian', value: 'ru' },\n      { name: 'Slovak', value: 'sk' },\n      { name: 'Slovenian', value: 'sl' },\n      { name: 'Serbian', value: 'sr' },\n      { name: 'Swedish', value: 'sv' },\n      { name: 'Tetum', value: 'tet' },\n      { name: 'Turkish', value: 'tr' },\n      { name: 'Ukrainian', value: 'uk' },\n      { name: 'Chinese', value: 'zh' }\n    ];\n\n    this.current.jsonData.unit = this.current.jsonData.unit || 'si';\n    this.current.jsonData.language = this.current.jsonData.language || 'en';\n  }\n}\n"],"sourceRoot":""}